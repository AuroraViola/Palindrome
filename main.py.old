import sys
import json
import xmltodict
import requests
import gi
import urllib.parse

gi.require_version('Adw', '1')
gi.require_version("Gtk", "4.0")
from gi.repository import Adw, Gtk, GLib, Gio

class queueManager():
    queue = []
    selector = 0

    def __init__(self):
        pass

    def emptyQueue(self):
        self.queue = []
        self.selector = 0

class SubsonicThingy(Adw.Application):
    songqueue = queueManager()
    playerCurrentSong = Gtk.Label.new("-")
    playerCurrentArtist = Gtk.Label.new("-")
    playerCurrentImage= Gtk.Picture.new()
    isPlaying = False

    def __init__(self):
        super().__init__(application_id="com.example.MyGtkApplication")
        GLib.set_application_name("Palindrome")
        with open("config.json", "r") as f:
            info = json.load(f)
            self.url = "https://" + info["hostname"] + "/rest/"
            self.par = {
                "u" : info["auth"]["username"],
                "p": info["auth"]["password"],
                "v": "1.16.1",
                "c": "Palindrome",
            }
        self.playerCurrentSong.props.halign

    def getAlbumsList(self):
        par2 = self.par.copy()
        par2['type'] = "alphabeticalByArtist"
        par2["size"] = 0
        return xmltodict.parse(requests.get(self.url + "getAlbumList", params=par2).content)["subsonic-response"]["albumList"]["album"]

    def getSongImage(self, songid):
        par2 = self.par.copy()
        par2["id"] = songid
        url = self.url + "getCoverArt?" + urllib.parse.urlencode(par2)
        return Gio.File.new_for_uri(url)

    def streamSong(self, songid):
        par2 = self.par.copy()
        par2["id"] = songid
        url = self.url + "download?" + urllib.parse.urlencode(par2)
        mpv.play(url)

    def playBtnPressed(self, button):
        if len(self.songqueue.queue) > 0:
            if not self.isPlaying:
                self.streamSong(self.songqueue.queue[self.songqueue.selector])
                self.isPlaying = True
                mpv.pause = False
                button.props.icon_name = "media-playback-pause-symbolic"
            else:
                if button.props.icon_name == "media-playback-start-symbolic":
                    button.props.icon_name = "media-playback-pause-symbolic"
                    mpv.pause = False
                else:
                    button.props.icon_name = "media-playback-start-symbolic"
                    mpv.pause = True
            self.updatePlayerCurrentSong()

    def stopBtnPressed(self, button, playBtn):
        mpv.stop()
        self.playerCurrentSong.set_label("-")
        self.playerCurrentArtist.set_label("-")
        self.isPlaying = False
        playBtn.props.icon_name = "media-playback-start-symbolic"

    def prevBtnPressed(self, button):
        if self.songqueue.selector > 0:
            self.songqueue.selector -= 1
            self.streamSong(self.songqueue.queue[self.songqueue.selector])
            self.updatePlayerCurrentSong()

    def nextBtnPressed(self, button):
        if self.songqueue.selector < len(self.songqueue.queue)-1:
            self.songqueue.selector += 1
            self.streamSong(self.songqueue.queue[self.songqueue.selector])
            self.updatePlayerCurrentSong()

    def updatePlayerCurrentSong(self):
        par2 = self.par.copy()
        par2["id"] = self.songqueue.queue[self.songqueue.selector]
        songinfo = xmltodict.parse(requests.get(self.url + "getSong", params=par2).content)["subsonic-response"]["song"]
        self.playerCurrentSong.set_label(songinfo["@title"])
        self.playerCurrentArtist.set_label(songinfo["@artist"])
        self.playerCurrentImage.set_file(self.getSongImage(songinfo["@id"]))

    def emptyQueue(self, button, playBtn):
        self.songqueue.emptyQueue()
        self.stopBtnPressed(button, playBtn)

    def addToQueue(self, button, albumid):
        par2 = self.par.copy()
        par2["id"] = albumid
        songlist = xmltodict.parse(requests.get(self.url + "getAlbum", params=par2).content)["subsonic-response"]["album"]["song"]
        try:
            for song in songlist:
                self.songqueue.queue.append(song["@id"])
        except:
            self.songqueue.queue.append(songlist["@id"])

    def do_activate(self):
        window = Adw.ApplicationWindow(application=self, title="Palindrome")
        windowContent = Gtk.Box.new(Gtk.Orientation.VERTICAL, 0)

        headerbar = Adw.HeaderBar().new()
        windowContent.append(headerbar)

        albumlist = Gtk.ListBox().new()
        albumlist.set_selection_mode(0)
        albumlist.props.css_classes = ["boxed-list"]
        albumlist.props.margin_start = 40
        albumlist.props.margin_end = 40
        albumlist.props.margin_top = 40
        albumlist.props.margin_bottom = 40
        for album in self.getAlbumsList():
            thing = Adw.ActionRow().new()
            thing.props.title = str(album["@title"]).replace("&", "&amp;")
            thing.props.subtitle = str(album["@artist"]).replace("&", "&amp;")

            addQueueBtn = Gtk.Button().new()
            addQueueBtn.props.icon_name = "list-add-symbolic"
            addQueueBtn.connect("clicked", self.addToQueue, album["@id"])
            thing.add_suffix(addQueueBtn)

            albumlist.append(thing)
        scrollList = Gtk.ScrolledWindow().new()
        scrollList.set_propagate_natural_height(True)
        scrollList.set_child(albumlist)

        playerController = Gtk.Box.new(Gtk.Orientation.HORIZONTAL, 10)
        playerController.props.halign = 3
        prevBtn = Gtk.Button.new()
        playBtn = Gtk.Button.new()
        nextBtn = Gtk.Button.new()
        stopBtn = Gtk.Button.new()
        emptyQueueBtn = Gtk.Button.new()

        prevBtn.props.icon_name = "media-skip-backward-symbolic"
        playBtn.props.icon_name = "media-playback-start-symbolic"
        nextBtn.props.icon_name = "media-skip-forward-symbolic"
        stopBtn.props.icon_name = "media-playback-stop-symbolic"
        emptyQueueBtn.props.icon_name = "app-remove-symbolic"

        playBtn.connect("clicked", self.playBtnPressed)
        stopBtn.connect("clicked", self.stopBtnPressed, playBtn)
        prevBtn.connect("clicked", self.prevBtnPressed)
        nextBtn.connect("clicked", self.nextBtnPressed)
        emptyQueueBtn.connect("clicked", self.emptyQueue, playBtn)

        playerController.append(emptyQueueBtn)
        playerController.append(prevBtn)
        playerController.append(playBtn)
        playerController.append(nextBtn)
        playerController.append(stopBtn)

        songImage = Gtk.Box.new(Gtk.Orientation.HORIZONTAL, 0)

        songImage.append(self.playerCurrentImage)

        songInfo = Gtk.Box.new(Gtk.Orientation.VERTICAL, 0)

        songInfo.append(self.playerCurrentSong)
        songInfo.append(self.playerCurrentArtist)

        footerBar = Gtk.Box.new(Gtk.Orientation.HORIZONTAL, 10)

        footerBar.append(songImage)
        footerBar.append(songInfo)
        footerBar.append(playerController)
        footerBar.set_size_request(-1, 150)
        footerBar.props.margin_top = 20
        footerBar.props.margin_bottom = 20
        footerBar.props.margin_start = 20
        footerBar.props.margin_end = 20

        windowContent.append(scrollList)
        windowContent.append(footerBar)

        window.set_content(windowContent)
        window.present()


app = SubsonicThingy()
import mpv
mpv = mpv.MPV(ytdl=True)
exit_status = app.run(sys.argv)
sys.exit(exit_status)

